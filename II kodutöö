#2.1.Koostada funktsioon symbolite_sagedus, mis võtab argumendiks sõne ja tagastab sõnastiku, 
#mis sisaldab selles sõnes esinevate tähemärkide esinemiste sagedusi. Tagastatav sõnastik peab seega sisaldama kirjeid, 
#kus võtmeteks on ühetähemärgilised sõned (sümbolid) ja väärtusteks vastavate sõnede (sümbolite) esinemiste arv argumendiks antud sõnes.

#Pange tähele, et sümbolite alla käivad kõik pikkusega 1 sõned, mis argumendiks antud sõnes sisalduvad, 
#sh tühikud ja kirjavahemärgid. Samuti loetakse erinevateks sümboliteks näiteks väike täht a ja suur täht A.

#Kontrollitakse vaid funktsiooni definitsiooni, programmis seda rakendama ei pea.

def symbolite_sagedus(sone):
    sonastik={}                          #loon sõnastiku
    for i in sone:                       #hakkan sõne täht haaval läbi käima
        sonastik[i]=sone.count(i)        #lisan iga sõne tähe sõnastiku võtmeks ning sone.count(i) funktsiooniga loen kokku, mitu korda esineb ja panen selle väärtuseks
    return sonastik                      #tagastab loodud sõnastiku
     
# Nt print(symbolite_sagedus("l@htek00d"))
# annab tulemuseks: {'l': 1, '@': 1, 'h': 1, 't': 1, 'e': 1, 'k': 1, '0': 2, 'd': 1}


##2.2.Sõiduki registreerimismärgile või riigi tunnusmärgile on tavaliselt märgitud riigi tähis 1-3-tähelise lühendina. 
Eesti puhul on lühendiks näiteks EST. Piirivalvel on andmebaas eri riikide tähistest tekstifailis nii, et faili igal 
real on tühikuga eraldatud riigi tähis ja selle riigi nimi.
Väljavõte riigitähiste failist:
ER Eritrea
FIN Soome
F Prantsusmaa
H Ungari
LT Leedu
EST Eesti
S Rootsi
Koostada funktsioon failist_sonastik, mis võtab argumendiks andmebaasi faili nime ning 
tagastab vastava faili sisu põhjal sõnastiku, kus võtmeteks on riigitähised (sõned) ja väärtusteks riikide nimed (sõned).

Koostada funktsioon tahised_nimedeks, mis võtab argumendiks järjendi riikide tähistest (sõned) ja eelmise funktsiooni poolt 
koostatud sõnastiku ning tagastab järjendi vastavate riikide nimedest. Kui mõni tähis argumendiks antud järjendis on tundmatu, 
siis selle riigi nimi tuleb asendada tagastatavas järjendis väärtusega None.

Rakendada funktsioone sobivalt programmis, mis
küsib kasutajalt andmebaasi faili nime,
küsib kasutajalt sõne, mis koosneb tühikutega eraldatud piiri ületanud sõidukite riikide tähistest,
väljastab sõidukite päritolumaade nimed üksteise alla. Kui mõni riigitähis on tundmatu, 
siis väljastada selle riigi nime asemel Tundmatu maa.

def failist_sonastik(failinimi):
    readfailist=open(failinimi, encoding="UTF-8")
    read=[]
    for rida in readfailist:                  
        read.append(rida.split())  #loeb sisse failis olevad read ja splitib kahe sõna vahelt, loeb listi tekib u selline list [['tere','tore]['tore','tere']]
    sonastik={}
    for i in range(len(read)):
        for j in range(len(read)):
            sonastik[read[i][0]]=read[i][1]  # teame, et iga listi alamelement on kahe elemendiga, seega esimene element läheb sõnastikku võtmeks ja teine väärtuseks
    return sonastik
    readfailist.close()               

def tahised_nimedeks(soned, tulemus):                 
    uus_list=[]
    for i in soned:
        if i in tulemus:                                 #võrdleb, kas leitud sõnastikus eksisteerib listis olev sõne.
            uus_list.append(tulemus[i])                  #kui jah, lisatakse sõnastiku võtme väärtus listi
        else:
            uus_list.append(None)                        #kui ei tuleb none
    return uus_list

s_failinimi=input("Sisestage andmebaasi faili nimi: ")       
piiriyletajad=input("Piiriületajad: ")
piiriyletajate_list=[]
piiriyletajate_list.append(piiriyletajad.split(' '))          #kuna ette antakse 1 sõne, on see vaja tükeldada tühikute kohapealt. NB! Tekib list selliselt [['J','CHN']]
de_tulemus=tahised_nimedeks(piiriyletajate_list[0], failist_sonastik(s_failinimi))  #kasutame funtksioonid ära
for i in de_tulemus:                                         #ja prindime välja üks haaval.
    if i==None:
        print("Tundmatu maa")
    else: 
        print(i)
        
  # Tulemused: 
  #1) funktsioon aasia.txt korral: {'J': 'Jaapan', 'SGP': 'Singapur', 'IND': 'India', 'LAO': 'Laos', 'T': 'Tai', 'CHN': 'Hiina'}
  #2) funktsioon tahised_nimedeks(['FIN', 'RUS', 'CHN', 'IND', 'F', 'LAO'], failist_sonastik("aasia.txt"))
[None, None, 'Hiina', 'India', None, 'Laos']
#3) kõik kokku:
Sisestage andmebaasi faili nimi: aasia.txt 
Piiriületajad: J CHN EST J
Jaapan
Hiina
Tundmatu maa
Jaapan


#2.3. Iga erakonna valimislubadused on kirja pandud hulgana, näiteks nii:
erakond_A = {"lastetoetusi tõsta", "pensione tõsta", "tulumaksu langetada", "kaitsekulutusi tõsta"}
erakond_B = {"muuta kõike varasemat"}
erakond_C = {"sisserännet piirata", "pensione tõsta", "kaitsekulutusi tõsta"}
erakond_D = set()
erakond_E = {"väljarännet piirata", "pensione tõsta", "õpetajate palku tõsta", "kaitsekulutusi tõsta", "alkoholiaktsiisi tõsta"}
Eesmärk on leida kaks erakonda, mis lubaduste poolest kõige enam sarnanevad. Selleks tuleb leida kaks hulka, mille ühisosa on kõige suurem.
Koostada funktsioon kooslubajad, mis võtab argumendiks järjendi erakondade lubaduste hulkadest ja tagastab paarina (kaheelemendilise ennikuna) nende kahe erakonna indeksid järjendis, mille lubadustel on kõige suurem ühisosa. Kui selliseid paare on mitu, siis võib neist ükskõik millise tagastada.
Kontrollitakse vaid funktsiooni definitsiooni, programmis seda rakendama ei pea.
>>> kooslubajad([{"arstide palku tõsta", "pensione tõsta", "kaitsekulutusi tõsta"}, {"lasteaiaõpetajate palku tõsta", "motosporti toetada"}, {"sisserännet piirata", "pensione tõsta", "arstide palku tõsta", "lasteaiaõpetajate palku tõsta"}, {"arstide palku tõsta", "tuletõrjujate palku tõsta", "politsenike palku tõsta", "piirivalvurite palku tõsta", "vangivalvurite palka tõsta"}])
(0, 2)
>>> kooslubajad([{"algatada koduloometoetus", "kuritegevust vähendada", "kõiki toetusi suurendada", "kaotada kõik maksud", "suurendada kõiki palkasid", "rajada spordiväljakud igasse linna"}, {"toetada pensionäre", "aidata noorperesid", "edendada maaelu", "suurendada vastsündinute arvu", "vähendada suremust"}])
(0, 1)

def kooslubajad(jarjend):
    suurimate_jarjend=[]
    indeks=[]
    kokkku=[]
    suur=0
    suurimate_indeksid=[]
    for i in range(len(jarjend)):                    #hakkab läbi käima järjendi elemente
        for j in range(len(jarjend)):               #hakkab läbi käima ka järjendi elemente
            if i!=j:                                                #kui kaks järjendi elementi ei ole sama indeksiga
                suurimate_jarjend.append(jarjend[i]&jarjend[j])      #siis lisatakse listi kahe järjendi ühisosa
                indeks.append([i,j])                                 #samuti nende järjendite indeksid selliselt
    if len(suurimate_jarjend)<3:                                 #kui ongi järjend, kus on ainul 2 elementi, siis ei saagi muud tulemust olla kui selline
        return (0, 1)
    else:
        for a in range(len(suurimate_jarjend)):                 #muul juhul hakatakse läbi käima suurimate_järjendit
            if len(suurimate_jarjend[a])>suur:                  #esialgselt võrreldakse 0-ga, kui on suurem, siis omandab suur uue väärtuse ehk elemendi pikkuse
                suur=len(suurimate_jarjend[a])
                suurimate_indeksid=[indeks[a]]                   #ja sama elemendile vastav indeks läheb suurimate indeksisse
        return tuple(suurimate_indeksid[0])                      #lõpuks tuleb teha listist ennik
        
        
#2.4. Koostada ilma argumentideta funktsioon juhuslik_bingo, mis tagastab juhuslikult genereeritud korrektse Bingo Loto tabeli, kus pole ühtegi ruutu veel märgitud/loositud.
Oma lahenduse kontrollimiseks saab kasutada ülesande Reeglite kontrollimine lahendusfunktsiooni.
Erinevalt reeglite kontrollimise ülesandest siin ülesandes lihtsustavat arvude unikaalsuse eeldust ei tehta. Seega on oluline tähele panna, et ükski arv ei tohi veerus (ega terves tabelis) korduda. Arvude genereerimiseks võib kasutada moodulist random funktsiooni sample. Komplekti arvudest esimese Bingo tabeli veeru jaoks saaks selle abil genereerida nii: sample(range(1, 16), 5).
Kontrollitakse vaid funktsiooni definitsiooni, programmis seda rakendama ei pea.

def juhuslik_bingo():
    from random import sample
    koond=[]
    uus_tabel=[]
    i=1
    j=16
    while i<70:                                   #esmalt genereerin 5 elemendilised listid, mis vastavad nõutud kriteeriumitele
        koond.append(sample(range(i,j),5))        # st 1-5, 16-30, 31-45, 46-60 ja 61-75
        i+=15
        j+=15
    for a in range(len(koond)):                   
        abitabel=[]                              #hakkab koguma liste ehk ridu
        uus_tabel.append(abitabel)               #kui rida valmis saab, loetakse see uude listi, millest kokku moodustub bingo tabel
        for b in range(len(koond[a])):
            abitabel.append(koond[b][a])         #selleks, et loeks veerge, tuleb i ja j ära vahetada ehk siin a ja b
    return uus_tabel      
        


