Ül 1
#Koostada funktsioon vahimatest_suurim, mis võtab argumendiks täisarvude maatriksi kahemõõtmelise järjendina ja tagastab antud maatriksist kõikide ridade vähimatest elementidest suurima.
#Teisisõnu peab tagastatav element olema vähim element oma reas, suurim element kõikide selliste elementide seas, mis on oma reas vähimad.

def vahimatest_suurim(taisarvud):
    uus_lst=[]
    for i in taisarvud:
        uus_lst.append(min(i))  #leiab sisemisest reast vähimad ja loeb need uude listi
    return max(uus_lst)

Ül 2
#Koostada funktsioon on_bingo_tabel, mis võtab argumendiks 5 x 5 maatriksi, 
#milles iga element on täisarv lõigust 1 - 75, ning 
#tagastab tõeväärtuse vastavalt sellele, kas arvud selles tabelis on veergudesse jaotatud vastavalt Bingo Loto reeglitele.
#Et tegu oleks korrektse Bingo Loto mänguväljaga, peavad vasakpoolseimas veerus olevad arvud kuuluma lõiku 1 - 15, 
#järgmises veerus olevad arvud lõiku 16 - 30 ja nii edasi, kuni viimases veerus on ainult arvud lõigust 61 - 75. 
#Lihtsuse mõttes võib siin ülesandes eeldada, et kõik arvud on antud tabelis unikaalsed ehk ükski arv ei esine tabelis rohkem kui üks kord.
   
    def on_bingo_tabel(maatriks):
    i=0
    for i in range(len(maatriks)):
        if maatriks[i][0]<1 or maatriks[i][0]>15:
            return False
        elif maatriks[i][1]<=15 or maatriks[i][1]>30:
            return False
        elif maatriks[i][2]<=30 or maatriks[i][2]>45:
            return False
        elif maatriks[i][3]<=45 or maatriks[i][3]>60:
            return False
        elif maatriks[i][4]<=60 or maatriks[i][4]>75:
            return False
        else:
            i+=1
    return True

Ül 3
#Järgnevad funktsioonid võtavad argumendiks 5 x 5 maatriksi, 
#mis tähistab Bingo Loto tabelit ning milles iga element on kas täisarv lõigust 1 - 75 
#või suur trükitäht X. Täht X sümboliseerib seda, et vastav arv on mängus juba loositud.
#1. Koostada funktsioon voitis_nurkademangu, mis tagastab tõeväärtuse vastavalt sellele, kas see mänguväli on võitnud nurkademängu: kõik mänguvälja nurgad on loositud.
#2. Koostada funktsioon voitis_diagonaalidemangu, mis tagastab tõeväärtuse vastavalt sellele, kas see mänguväli on võitnud diagonaalidemängu: kõik mänguvälja diagonaalidel olevad arvud on loositud. Selleks koostada ja kasutada kahte abifunktsiooni:
#Funktsioon x_peadiagonaalil, mis võtab argumendiks mänguvälja ja tagastab selle peadiagonaalil olevate X arvu.
#Funktsioon x_korvaldiagonaalil, mis võtab argumendiks mänguvälja ja tagastab selle kõrvaldiagonaalil olevate X arvu.
#3. Koostada funktsioon voitis_taismangu, mis tagastab tõeväärtuse vastavalt sellele, kas see mänguväli on võitnud täismängu: kõik mänguvälja arvud on loositud.

def voitis_nurkademangu(maatriks):
    if maatriks[0][0]=="X" and maatriks[0][4]=="X" and maatriks[4][0]=="X"and maatriks[4][4]=="X":
        return True
    return False

def x_peadiagonaalil(maatriks):  
    i=0
    j=0
    kokku=0
    for i in range(len(maatriks)):
        if maatriks[i][j]=="X":
            kokku+=1
            i+=1
            j+=1
        else:
            i+=1
            j+=1
    return kokku

def x_korvaldiagonaalil(maatriks):
    i=0
    j=4
    kokku=0
    for i in range(len(maatriks)):
        if maatriks[i][j]=="X":
            kokku+=1
            i+=1
            j-=1
        else:
            i+=1
            j-=1
    return kokku
                
def voitis_diagonaalidemangu(maatriks):
    if x_peadiagonaalil(maatriks)==5 and x_korvaldiagonaalil(maatriks)==5:
        return True
    else:
        return False

def voitis_taismangu(maatriks):
    for i in range(len(maatriks)):
        for j in range(len(maatriks[i])):
            if maatriks[i][j]!="X":
                return False
    return True
    
Ül 4
#On antud fail, kus igal real on tühikutega eraldatud täisarvud. Arvude hulk ridadel võib olla erinev. Eesmärk on igal real olevad arvud kokku liita ja leida saadud summadest suurim.
#Koostada programm, mis küsib kasutajalt failinime, leiab, mis rida failist sisaldab kõige suuremat summat, väljastab suurima summaga rea järjekorranumbri ja vastava summa ekraanile.
#Ridade järjekorranumbrid algavad tavapäraselt ühest.

failinimi=open(input("Sisestage failinimi: "))
read=[]
for rida in failinimi:
    eraldi=[]
    osad=rida.split()
    for osa in osad:
        eraldi.append(int(osa))
    read.append(eraldi)

uus_list=[]
for i in range(len(read)):
    summa=0
    for j in range(len(read[i])):
        summa+=read[i][j]
    uus_list.append(summa)

failinimi.close()

print("Suurim summa on failis "+str((uus_list.index(max(uus_list)))+1) + ". real ja see on "+ str(max(uus_list))+".")

Ül 5

#Failis on lahendatud Sudoku tabel esitatud nii, et kokku on 9 rida ja igas reas on tühikutega eraldatud 9 arvu. Sudoku mängureeglitega saab tutvuda näiteks siin.
#Koostada programm, mis küsib kasutajalt failinime, kontrollib, kas vastavas failis antud Sudoku lahendus on korrektne:
#kui lahendus on korrektne, siis väljastab ekraanile OK või
#kui lahendus on mittekorrektne, siis väljastab ekraanile VIGA.
#Teile on juba ette antud (teise programmeerija poolt koostatud) kõikide 3x3 kastide kontrollimise funktsioon. 
#Uurige, kuidas see töötab ja rakendage seda oma programmis sobivalt. Programmile tuleb ise lisada ridade ja veergude kontrollimine

def kastid_korras(maatriks):
    # Vaatame igat 3x3 kasti
    for rea_nurk in range(0, 9, 3):
        for veeru_nurk in range(0, 9, 3):
            # Iga kasti korral kogume tema elemendid järjendisse 'kast'
            kast = []
            for i in range(3):
                for j in range(3):
                    kast.append(int(maatriks[rea_nurk + i][veeru_nurk + j]))
            # Ja kontrollime, kas elemendid on korrektsed
            if sorted(kast) != list(range(1, 10)):
                return False
    return True

def read_korras(maatriks):
    for i in range(len(maatriks)):
        if sorted(maatriks[i]) != list(range(1,10)):
            return False
    return True

def veerud_korras(maatriks):
    for i in range(len(maatriks)):
        kast=[]
        for j in range(len(maatriks[i])):
            if j in range(len(maatriks[i])):
                kast.append(int(maatriks[j][i]))
        if sorted(kast) != list(range(1, 10)):
            return False
    return True   

failinimi=open(input("Sisestage failinimi: "))
read=[]
for rida in failinimi:
    eraldi=[]
    osad=rida.split()
    for osa in osad:
        eraldi.append(int(osa))
    read.append(eraldi)
if kastid_korras(read)==False or veerud_korras(read)==False or read_korras(read)==False:
    print("Viga")
else:
    print("OK")
failinimi.close()

Ül 6

Koostada funktsioon leidub_anagramm, mis võtab argumendiks sõnede maatriksi kahemõõtmelise järjendina, 
milles sõned koosnevad vaid tähtedest a, b, c ja d. Funktsioon tagastab tõeväärtuse vastavalt sellele, kas selles maatriksis leidub element, mis on sellise sõne anagramm, mis on saadud temast vahetult vasakul ja vahetult paremal olevate sõnede kokkukirjutamise teel.

Kui vasakul või paremal elementi ei leidu, siis tuleb seda arvestada tühja sõnena.

Kontrollitakse vaid funktsiooni definitsiooni, programmis seda rakendama ei pea.

def leidub_anagramm(maatriks):
    if len(maatriks)==0:  #kontrollitakse, et kas leidub maatriks, millel pole ühtegi elementi
        return False
    if len(maatriks)==1 and isinstance(maatriks[0],str): # kontrollitakse, kas maatriksi pikkus on 1 ja kas maatriksi esimene element on str (ühene maatriks nt nii ['a'])
        for i in maatriks[0]:  
            if i in 'abcd':  #kui üks maatriksi elementidest on kas a, b, c või d
                return True
    if len(maatriks)==1 and isinstance(maatriks[0],list) and len(maatriks[0])==1:   #kas maatrikis pikkus on 1 ja kas maatriksi sisemine element on list ja maatriksi sisemise elemendi pikkus on 1 nt [['']] maatriks
        return True
    if isinstance(maatriks[0],str): #kas maatriksi esimese sisemise elemendi väärtus on str
        if len(maatriks)==2 and sorted(list(maatriks[0]))==sorted(list(maatriks[1])):  # maatriksi pikkus on 2, list tükeldab sõned tähemärkideks nt 'ab' muutub 'a','b', sorted, sorteerib listi. Kontrollitakse nt kas ['ab', 'ba'] on anagramm ehk luuakse list ['a','b'] ja ['a','b'] ja võrreldakse neid
            return True
        if len(maatriks)==3 and sorted(list(maatriks[0]+maatriks[2]))==sorted(list(maatriks[1])): vt eelmist, ainult maatriksi pikkus on 3, seega võrreldakse ['a','bac','cb'] korral ['a','b','c'] ja ['a', 'b','c'] võrdust(esimene list on moodustatud esimesest ja kolmandast sõnest.
            return True
    for i in range(len(maatriks)):  #kui on rohkem kui 1 veerg maatriksil on vaja kahekordset loopi.
        if len(maatriks[i])==2 and sorted(list(maatriks[i][0]))==sorted(list(maatriks[i][1])):
            return True
        if len(maatriks[i])==3 and sorted(list(maatriks[i][0]+maatriks[i][2]))==sorted(list(maatriks[i][1])):
            return True
    return False


